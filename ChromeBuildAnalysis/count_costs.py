"""
Summarize the compilation costs of a particular set of source files by scanning
a .csv report generated by analyze_chrome.py.

Sample usage:
1) Find the cost to compile everything.
  >python3 count_costs.py ChromeBuildVisualizer\windows-default.csv
  30137 files took 21.453 hours to build. 11.856 M lines, 3611.6 M dependent lines

2) Find the cost to compile all generated source files.
  >python3 count_costs.py ChromeBuildVisualizer\windows-default.csv gen\*
  5712 files took 4.093 hours to build. 3.069 M lines, 842.4 M dependent lines

3) Find the cost to compile all checked-in source and verify that the numbers add up.
  >python3 count_costs.py ChromeBuildVisualizer\windows-default.csv ..\..\*
  24425 files took 17.360 hours to build. 8.786 M lines, 2769.2 M dependent lines

The status is printed to stderr. If --verbose is specified then a reduced .csv file
is printed.
"""

from __future__ import print_function

import argparse
import fnmatch
import sys

def main():
  parser = argparse.ArgumentParser()
  parser.add_argument('csv_file', nargs=1)
  parser.add_argument('wildcard', nargs='?', default='*')
  parser.add_argument('--verbose', action='store_true')

  args = parser.parse_args()

  lines = open(args.csv_file[0]).readlines()

  count = 0
  t_ms = 0
  num_dependent_lines = 0
  num_lines = 0

  headers = 'name,t_ms,num_dependent_lines,num_lines,num_deps'
  assert(lines[0].strip() == headers)
  if args.verbose:
    print(lines[0].strip())
  for line in lines[1:]:
    parts = line.split(',')
    if fnmatch.fnmatch(parts[0], args.wildcard):
      count += 1
      t_ms += int(parts[1])
      num_dependent_lines += int(parts[2])
      num_lines += int(parts[3])
      if args.verbose:
        print(line.strip())

  print('%d files took %1.3f hours to build. %1.3f M lines, %1.1f M dependent lines' % (count, t_ms / 1000.0 / 3600, num_lines / 1000000.0, num_dependent_lines / 1000000.0), file=sys.stderr)


if __name__ == '__main__':
    sys.exit(main())
